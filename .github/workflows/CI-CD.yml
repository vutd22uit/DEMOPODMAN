name: Podman CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build the Docker image
        run: |
          podman build . --file Dockerfile --tag docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:${{ github.sha }}
          podman tag docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:${{ github.sha }} docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:latest

      - name: Run Trivy vulnerability scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:${{ github.sha }}

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | podman login docker.io -u $DOCKER_USERNAME --password-stdin

      - name: Push to Docker Hub
        run: |
          podman push docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:${{ github.sha }}
          podman push docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Copy SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH key to the agent
        run: eval $(ssh-agent) && ssh-add ~/.ssh/id_rsa

      - name: Copy known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            podman login docker.io -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            podman pull docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:latest
            podman stop web || true
            podman rm web || true
            podman run -d --name web -p 8080:80 docker.io/${{ secrets.DOCKER_USERNAME }}/podman-demo:latest
          EOF
