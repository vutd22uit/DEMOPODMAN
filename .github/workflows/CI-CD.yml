name: Podman CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Podman on GitHub Runner
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | podman login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Podman image
        run: |
          # Build the image with the SHA as the tag
          podman build -t docker.io/${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image docker.io/${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}

      - name: Push Podman image to Docker Hub
        if: success()
        run: |
          # Push the image to Docker Hub
          podman push docker.io/${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}

      - name: Deploy to EC2 instance
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | podman login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the new image
            podman pull docker.io/${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}

            # Stop and remove the existing container
            podman stop webapp || true
            podman rm webapp || true

            # Remove all old images to avoid conflicts
            podman images -q --filter "reference=docker.io/${{ secrets.DOCKER_USERNAME }}/webapp" | grep -v "${{ github.sha }}" | xargs --no-run-if-empty podman rmi

            # Run the new container
            podman run -d --name webapp -p 8080:80 docker.io/${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}
